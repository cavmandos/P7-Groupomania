{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.from-entries.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nexport default {\n  name: \"PostsView\",\n  components: {},\n  data: function data() {\n    return {\n      yesBtn: false,\n      postId: \"\",\n      users: [],\n      contentComment: \"\",\n      profile: false,\n      loading: false,\n      posts: [],\n      comments: [],\n      activities: [],\n      postContent: \"\",\n      postFile: \"\",\n      postErr: \"\",\n      commentErr: \"\",\n      commentOK: false\n    };\n  },\n  methods: {\n    //COMMENT\n    filterComments: function filterComments(idPost) {\n      return this.comments.filter(function (comment) {\n        return comment.postId == idPost;\n      });\n    },\n    showComment: function showComment() {\n      return this.yesBtn = !this.yesBtn;\n    },\n    //Go to co-worker profile\n    goToCoworker: function goToCoworker(id) {\n      var local = JSON.parse(localStorage.user);\n      var token = local.token;\n      axios.get(\"http://localhost:3000/auth/\" + id, {\n        headers: {\n          Authorization: \"Bearer \" + token\n        }\n      }).then(function (res) {\n        var resultat = res.data;\n        var nom = resultat[0].nom;\n        var prenom = resultat[0].prenom;\n        var email = resultat[0].email;\n        var image = resultat[0].image;\n        var bio = resultat[0].bio;\n        var coworker = {\n          nom: nom,\n          prenom: prenom,\n          email: email,\n          image: image,\n          bio: bio\n        };\n        localStorage.setItem(\"coworker\", JSON.stringify(coworker));\n        location.href = \"http://localhost:8080/#/coworker\";\n      }).catch(function (error) {\n        console.log(error.response.data.error);\n      });\n    },\n    //POST\n    newPost: function newPost(event) {\n      var _Object$fromEntries = Object.fromEntries(new FormData(event.target)),\n          content = _Object$fromEntries.content,\n          image = _Object$fromEntries.image;\n\n      var local = JSON.parse(localStorage.user);\n      var userId = local.userId;\n      var prenom = local.prenom;\n      var nom = local.nom;\n      var date = Date.now();\n      var imageProfile = local.imageProfile;\n      console.log(date);\n      this.content = content;\n      this.image = image;\n      console.log({\n        userId: userId,\n        content: content,\n        image: image\n      });\n      axios({\n        method: \"post\",\n        url: \"http://localhost:3000/posts\",\n        data: {\n          userId: userId,\n          content: content,\n          image: image,\n          prenom: prenom,\n          nom: nom,\n          date: date,\n          imageProfile: imageProfile\n        },\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (reponse) {\n        console.log(reponse);\n        Swal.fire({\n          title: \"Nouvelle publication postée !\",\n          icon: \"success\",\n          timer: 1500,\n          showConfirmButton: false,\n          timerProgressBar: true,\n          willClose: function willClose() {\n            location.reload();\n          }\n        });\n      }).catch(function (err) {\n        alert(err.response.data.message);\n      });\n    },\n    //Delete post\n    deletePost: function deletePost(id) {\n      var local = JSON.parse(localStorage.user);\n      var token = local.token;\n      axios.delete(\"http://localhost:3000/posts/\".concat(id), {\n        headers: {\n          Authorization: \"Bearer \" + token\n        },\n        data: {\n          id: id\n        }\n      }).then(function (res) {\n        console.log(res.data);\n        Swal.fire({\n          text: \"Post supprimé\",\n          icon: \"success\",\n          timer: 1500,\n          showConfirmButton: false,\n          timerProgressBar: true,\n          willClose: function willClose() {\n            location.reload();\n          }\n        });\n      }).catch(function (error) {\n        console.log(error.response.data.error);\n      });\n    },\n    //Delete comment\n    deleteComment: function deleteComment(id) {\n      var local = JSON.parse(localStorage.user);\n      var token = local.token;\n      axios.delete(\"http://localhost:3000/comments/\".concat(id), {\n        headers: {\n          Authorization: \"Bearer \" + token\n        },\n        data: {\n          id: id\n        }\n      }).then(function (res) {\n        console.log(res.data);\n        Swal.fire({\n          text: \"Commentaire supprimé\",\n          icon: \"success\",\n          timer: 1500,\n          showConfirmButton: false,\n          timerProgressBar: true,\n          willClose: function willClose() {\n            location.reload();\n          }\n        });\n      }).catch(function (error) {\n        console.log(error.response.data.error);\n      });\n    },\n    //Create a new comment\n    newComment: function newComment(id) {\n      var local = JSON.parse(localStorage.user);\n      var userId = local.userId;\n      var nom = local.nom;\n      var prenom = local.prenom;\n      var date = Date.now();\n      axios({\n        method: \"post\",\n        url: \"http://localhost:3000/comments\",\n        data: {\n          content: this.contentComment,\n          userId: userId,\n          postId: id,\n          nom: nom,\n          prenom: prenom,\n          date: date\n        },\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (reponse) {\n        console.log(reponse);\n        Swal.fire({\n          title: \"Nouveau commentaire posté !\",\n          icon: \"success\",\n          timer: 1500,\n          showConfirmButton: false,\n          timerProgressBar: true,\n          willClose: function willClose() {\n            location.reload();\n          }\n        });\n      }).catch(function (err) {\n        alert(err.response.data.message);\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (!localStorage.getItem(\"user\")) {\n      this.$router.push(\"/\");\n    } else {\n      this.user = JSON.parse(localStorage.getItem(\"user\")); // Get all posts\n\n      axios.get(\"http://localhost:3000/posts\").then(function (res) {\n        _this.posts = res.data;\n      }).catch(function (err) {\n        _this.postErr = err;\n      }); // Get all comments\n\n      axios.get(\"http://localhost:3000/comments\").then(function (res) {\n        _this.comments = res.data;\n        _this.loading = false;\n      }).catch(function (err) {\n        _this.commentErr = err;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;AACA;AAEA;AACAA,mBADA;AAEAC,gBAFA;AAGAC;AACA;AACAC,mBADA;AAEAC,gBAFA;AAGAC,eAHA;AAIAC,wBAJA;AAMAC,oBANA;AAOAC,oBAPA;AAQAC,eARA;AASAC,kBATA;AAUAC,oBAVA;AAWAC,qBAXA;AAYAC,kBAZA;AAaAC,iBAbA;AAcAC,oBAdA;AAeAC;AAfA;AAiBA,GArBA;AAuBAC;AACA;AACAC,kBAFA,0BAEAC,MAFA,EAEA;AACA;AAAA;AAAA;AACA,KAJA;AAMAC,eANA,yBAMA;AACA;AACA,KARA;AAUA;AACAC,gBAXA,wBAWAC,EAXA,EAWA;AACA;AACA;AACAC,YACAC,GADA,CACA,kCADA,EACA;AACAC;AACAC;AADA;AADA,OADA,EAMAC,IANA,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;AACAC;AACAC;AACA,OAhBA,EAiBAC,KAjBA,CAiBA;AACAC;AACA,OAnBA;AAoBA,KAlCA;AAoCA;AACAC,WArCA,mBAqCAC,KArCA,EAqCA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAF;AACA;AACA;AACAA;AAAAG;AAAAC;AAAAT;AAAA;AAEAR;AACAkB,sBADA;AAEAC,0CAFA;AAGAxC;AAAAqC;AAAAC;AAAAT;AAAAF;AAAAD;AAAAe;AAAAC;AAAA,SAHA;AAIAnB;AAAA;AAAA;AAJA,SAMAE,IANA,CAMA;AACAS;AACAS;AACAC,gDADA;AAEAC,yBAFA;AAGAC,qBAHA;AAIAC,kCAJA;AAKAC,gCALA;AAMAC;AACAjB;AACA;AARA;AAUA,OAlBA,EAmBAC,KAnBA,CAmBA;AACAiB;AACA,OArBA;AAsBA,KAxEA;AAyEA;AACAC,cA1EA,sBA0EA/B,EA1EA,EA0EA;AACA;AACA;AAEAC,YACA+B,MADA,uCACAhC,EADA,GACA;AACAG;AACAC;AADA,SADA;AAIAxB;AAAAoB;AAAA;AAJA,OADA,EAOAK,IAPA,CAOA;AACAS;AACAS;AACAU,+BADA;AAEAR,yBAFA;AAGAC,qBAHA;AAIAC,kCAJA;AAKAC,gCALA;AAMAC;AACAjB;AACA;AARA;AAUA,OAnBA,EAoBAC,KApBA,CAoBA;AACAC;AACA,OAtBA;AAuBA,KArGA;AAsGA;AACAoB,iBAvGA,yBAuGAlC,EAvGA,EAuGA;AACA;AACA;AAEAC,YACA+B,MADA,0CACAhC,EADA,GACA;AACAG;AACAC;AADA,SADA;AAIAxB;AAAAoB;AAAA;AAJA,OADA,EAOAK,IAPA,CAOA;AACAS;AACAS;AACAU,sCADA;AAEAR,yBAFA;AAGAC,qBAHA;AAIAC,kCAJA;AAKAC,gCALA;AAMAC;AACAjB;AACA;AARA;AAUA,OAnBA,EAoBAC,KApBA,CAoBA;AACAC;AACA,OAtBA;AAuBA,KAlIA;AAmIA;AACAqB,cApIA,sBAoIAnC,EApIA,EAoIA;AACA;AACA;AACA;AACA;AACA;AAEAC;AACAkB,sBADA;AAEAC,6CAFA;AAGAxC;AACAsC,sCADA;AAEAD,wBAFA;AAGAnC,oBAHA;AAIAwB,kBAJA;AAKAC,wBALA;AAMAc;AANA,SAHA;AAWAlB;AAAA;AAAA;AAXA,SAaAE,IAbA,CAaA;AACAS;AACAS;AACAC,8CADA;AAEAC,yBAFA;AAGAC,qBAHA;AAIAC,kCAJA;AAKAC,gCALA;AAMAC;AACAjB;AACA;AARA;AAUA,OAzBA,EA0BAC,KA1BA,CA0BA;AACAiB;AACA,OA5BA;AA6BA;AAxKA,GAvBA;AAiMAM,SAjMA,qBAiMA;AAAA;;AACA;AACA;AACA,KAFA,MAEA;AACA,2DADA,CAGA;;AACAnC,YACAC,GADA,gCAEAG,IAFA,CAEA;AACA;AACA,OAJA,EAKAQ,KALA,CAKA;AACA;AACA,OAPA,EAJA,CAYA;;AACAZ,YACAC,GADA,mCAEAG,IAFA,CAEA;AACA;AACA;AACA,OALA,EAMAQ,KANA,CAMA;AACA;AACA,OARA;AASA;AACA;AA3NA","names":["name","components","data","yesBtn","postId","users","contentComment","profile","loading","posts","comments","activities","postContent","postFile","postErr","commentErr","commentOK","methods","filterComments","idPost","showComment","goToCoworker","id","axios","get","headers","Authorization","then","nom","prenom","email","image","bio","localStorage","location","catch","console","newPost","event","userId","content","method","url","date","imageProfile","Swal","title","icon","timer","showConfirmButton","timerProgressBar","willClose","alert","deletePost","delete","text","deleteComment","newComment","mounted"],"sourceRoot":"src/components","sources":["PostsView.vue"],"sourcesContent":["<template>\n  <v-card max-width=\"800\" class=\"mx-auto\">\n    <main class=\"activities-container\">\n      <div class=\"form-container\">\n        <v-toolbar class=\"red lighten-4\">\n          <v-toolbar-title>Créer une nouvelle publication</v-toolbar-title>\n        </v-toolbar>\n        <v-col md=\"6\" offset-md=\"3\">\n          <form @submit.prevent=\"newPost\">\n            <div class=\"form-group\">\n              <label for=\"content\"></label>\n              <input\n                type=\"textarea\"\n                name=\"content\"\n                id=\"content\"\n                placeholder=\"Ecrire quelque chose...\"\n                required\n                maxlength=\"300\"\n              />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"image\"></label>\n              <input\n                type=\"text\"\n                name=\"image\"\n                id=\"imagePost\"\n                placeholder=\"(Optionnel) L'url d'une image ou d'un GIF à partager\"\n              />\n            </div>\n            <div class=\"form-group\">\n              <button type=\"submit\">POST</button>\n            </div>\n          </form>\n        </v-col>\n      </div>\n      <div class=\"error-msg\" v-if=\"postErr || commentErr\">\n        <p>{{ postErr }}</p>\n        <p>{{ commentErr }}</p>\n      </div>\n      <br />\n\n      <section class=\"all-posts-container\">\n        <div class=\"post-container\" v-for=\"post in posts\" :key=\"post.id\">\n          <div class=\"infos\">\n            <div class=\"author\">\n              <a\n                href=\"#\"\n                class=\"anchorCoworker\"\n                @click.prevent=\"goToCoworker(post.userId)\"\n              >\n                <p class=\"username\">{{ post.prenom }} {{ post.nom }}</p>\n              </a>\n            </div>\n            <div class=\"dateDelete\">\n              <p class=\"date\">\n                {{ post.date.slice(0, 16).replace(\"T\", \" / \") }}\n              </p>\n              <div\n                @click=\"deletePost(post.id)\"\n                class=\"deleteIcon\"\n                v-if=\"user.userId == post.userId || user.userId == 1\"\n              >\n                <v-icon> mdi-delete </v-icon>\n              </div>\n            </div>\n          </div>\n          <div class=\"content\">\n            <div\n              class=\"postPict\"\n              v-if=\"post.image\"\n              :style=\"{ backgroundImage: 'url(' + post.image + ')' }\"\n            ></div>\n            <p>\n              {{ post.content }}\n            </p>\n\n            <v-btn\n              class=\"commentBtn\"\n              elevation=\"2\"\n              @click=\"showComment(post.id)\"\n              >Commenter</v-btn\n            >\n            <form v-show=\"yesBtn\" @submit.prevent=\"newComment(post.id)\">\n              <div class=\"form-comment\">\n                <label for=\"contentComment\"></label>\n                <input\n                  type=\"textarea\"\n                  name=\"contentComment\"\n                  id=\"contentComment\"\n                  placeholder=\"Ecrire un commentaire\"\n                  maxlength=\"100\"\n                  v-model=\"contentComment\"\n                />\n                <div class=\"form-group\">\n                  <button type=\"submit\">Post</button>\n                </div>\n              </div>\n            </form>\n          </div>\n\n          <div class=\"commentStructure\">\n            <div\n              class=\"comment-container\"\n              v-for=\"comment in filterComments(post.id)\"\n              :key=\"comment.id\"\n            >\n              <div class=\"comment-infos\">\n                <a\n                  href=\"#\"\n                  class=\"anchorCoworker\"\n                  @click.prevent=\"goToCoworker(comment.userId)\"\n                >\n                  <p class=\"comment-username\">\n                    {{ comment.prenom }} {{ comment.nom }}\n                  </p>\n                </a>\n                <div class=\"dateDelete\">\n                  <p class=\"date\">\n                    {{ comment.date.slice(0, 16).replace(\"T\", \" / \") }}\n                  </p>\n                  <div\n                    @click=\"deleteComment(comment.id)\"\n                    class=\"deleteIcon\"\n                    v-if=\"user.userId == comment.userId || user.userId == 1\"\n                  >\n                    <v-icon> mdi-delete </v-icon>\n                  </div>\n                </div>\n              </div>\n              <div class=\"comment-content\">\n                <p>\n                  {{ comment.content }}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n  </v-card>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\nexport default {\n  name: \"PostsView\",\n  components: {},\n  data: function () {\n    return {\n      yesBtn: false,\n      postId: \"\",\n      users: [],\n      contentComment: \"\",\n\n      profile: false,\n      loading: false,\n      posts: [],\n      comments: [],\n      activities: [],\n      postContent: \"\",\n      postFile: \"\",\n      postErr: \"\",\n      commentErr: \"\",\n      commentOK: false,\n    };\n  },\n\n  methods: {\n    //COMMENT\n    filterComments(idPost) {\n      return this.comments.filter((comment) => comment.postId == idPost);\n    },\n\n    showComment() {\n      return (this.yesBtn = !this.yesBtn);\n    },\n\n    //Go to co-worker profile\n    goToCoworker(id) {\n      let local = JSON.parse(localStorage.user);\n      let token = local.token;\n      axios\n        .get(\"http://localhost:3000/auth/\" + id, {\n          headers: {\n            Authorization: \"Bearer \" + token,\n          },\n        })\n        .then((res) => {\n          let resultat = res.data;\n          const nom = resultat[0].nom;\n          const prenom = resultat[0].prenom;\n          const email = resultat[0].email;\n          const image = resultat[0].image;\n          const bio = resultat[0].bio;\n          let coworker = { nom, prenom, email, image, bio };\n          localStorage.setItem(\"coworker\", JSON.stringify(coworker));\n          location.href = \"http://localhost:8080/#/coworker\";\n        })\n        .catch((error) => {\n          console.log(error.response.data.error);\n        });\n    },\n\n    //POST\n    newPost(event) {\n      const { content, image } = Object.fromEntries(new FormData(event.target));\n      let local = JSON.parse(localStorage.user);\n      let userId = local.userId;\n      let prenom = local.prenom;\n      let nom = local.nom;\n      let date = Date.now();\n      let imageProfile = local.imageProfile;\n      console.log(date);\n      this.content = content;\n      this.image = image;\n      console.log({ userId, content, image });\n\n      axios({\n        method: \"post\",\n        url: \"http://localhost:3000/posts\",\n        data: { userId, content, image, prenom, nom, date, imageProfile },\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n        .then((reponse) => {\n          console.log(reponse);\n          Swal.fire({\n            title: \"Nouvelle publication postée !\",\n            icon: \"success\",\n            timer: 1500,\n            showConfirmButton: false,\n            timerProgressBar: true,\n            willClose: () => {\n              location.reload();\n            },\n          });\n        })\n        .catch((err) => {\n          alert(err.response.data.message);\n        });\n    },\n    //Delete post\n    deletePost(id) {\n      let local = JSON.parse(localStorage.user);\n      let token = local.token;\n\n      axios\n        .delete(`http://localhost:3000/posts/${id}`, {\n          headers: {\n            Authorization: \"Bearer \" + token,\n          },\n          data: { id },\n        })\n        .then((res) => {\n          console.log(res.data);\n          Swal.fire({\n            text: \"Post supprimé\",\n            icon: \"success\",\n            timer: 1500,\n            showConfirmButton: false,\n            timerProgressBar: true,\n            willClose: () => {\n              location.reload();\n            },\n          });\n        })\n        .catch((error) => {\n          console.log(error.response.data.error);\n        });\n    },\n    //Delete comment\n    deleteComment(id) {\n      let local = JSON.parse(localStorage.user);\n      let token = local.token;\n\n      axios\n        .delete(`http://localhost:3000/comments/${id}`, {\n          headers: {\n            Authorization: \"Bearer \" + token,\n          },\n          data: { id },\n        })\n        .then((res) => {\n          console.log(res.data);\n          Swal.fire({\n            text: \"Commentaire supprimé\",\n            icon: \"success\",\n            timer: 1500,\n            showConfirmButton: false,\n            timerProgressBar: true,\n            willClose: () => {\n              location.reload();\n            },\n          });\n        })\n        .catch((error) => {\n          console.log(error.response.data.error);\n        });\n    },\n    //Create a new comment\n    newComment(id) {\n      let local = JSON.parse(localStorage.user);\n      let userId = local.userId;\n      let nom = local.nom;\n      let prenom = local.prenom;\n      let date = Date.now();\n\n      axios({\n        method: \"post\",\n        url: \"http://localhost:3000/comments\",\n        data: {\n          content: this.contentComment,\n          userId: userId,\n          postId: id,\n          nom: nom,\n          prenom: prenom,\n          date,\n        },\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n        .then((reponse) => {\n          console.log(reponse);\n          Swal.fire({\n            title: \"Nouveau commentaire posté !\",\n            icon: \"success\",\n            timer: 1500,\n            showConfirmButton: false,\n            timerProgressBar: true,\n            willClose: () => {\n              location.reload();\n            },\n          });\n        })\n        .catch((err) => {\n          alert(err.response.data.message);\n        });\n    },\n  },\n  mounted() {\n    if (!localStorage.getItem(\"user\")) {\n      this.$router.push(\"/\");\n    } else {\n      this.user = JSON.parse(localStorage.getItem(\"user\"));\n\n      // Get all posts\n      axios\n        .get(`http://localhost:3000/posts`)\n        .then((res) => {\n          this.posts = res.data;\n        })\n        .catch((err) => {\n          this.postErr = err;\n        });\n      // Get all comments\n      axios\n        .get(`http://localhost:3000/comments`)\n        .then((res) => {\n          this.comments = res.data;\n          this.loading = false;\n        })\n        .catch((err) => {\n          this.commentErr = err;\n        });\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\nform {\n  border: 1px solid rgb(214, 214, 214);\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 0px;\n}\n\n.content > form {\n  border: none;\n}\n\n.postPict {\n  width: 230px;\n  height: 200px;\n  background-position: center;\n  background-size: cover;\n  border: 1px solid rgb(214, 214, 214);\n  border-radius: 5%;\n  margin: 20px 0px 20px 0px;\n}\n\n.form-group {\n  width: 99%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0.3rem 1.5rem;\n}\n\n.form-comment {\n  width: 99%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0.3rem 1.5rem;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 0.6rem;\n  border: 1px solid rgb(133, 133, 133);\n  border-radius: 5px;\n}\n\n.form-comment input {\n  width: 100%;\n  padding: 0.6rem;\n  border: 1px solid rgb(133, 133, 133);\n  border-radius: 5px;\n}\n.form-group input::placeholder {\n  color: rgb(133, 133, 133);\n}\n\n.form-group button {\n  width: 7rem;\n  align-self: center;\n  cursor: pointer;\n  color: black;\n  background-color: #ffd7d7;\n  font-size: 1.1rem;\n  transition: 0.4s;\n  padding: 5px 0px;\n  border-radius: 20px;\n}\n.form-group button:hover {\n  transform: scale(1.1);\n}\n\n.all-posts-container {\n  width: 90%;\n  margin: auto;\n  @media screen and (min-width: 768px) {\n    width: 60%;\n  }\n}\n\n.post-container {\n  margin-bottom: 13px;\n}\n\n.infos {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n  background-color: #ffd7d7;\n  border-radius: 20px 20px 0px 0px;\n}\n.author {\n  display: flex;\n  align-content: center;\n  font-size: 0.9rem;\n}\n\n.anchorCoworker {\n  cursor: pointer;\n  text-decoration: none;\n  color: black;\n}\n\n.username {\n  margin: 0px 0px 0px 10px;\n  display: flex;\n  align-items: center;\n}\n\n.date {\n  margin: 0px 5px 0px 0px;\n}\n\n.dateDelete {\n  display: flex;\n  align-items: center;\n}\n\n.dateDelete p {\n  font-size: 0.8rem;\n  @media screen and (max-width: 500px) {\n    font-size: 0.7rem;\n  }\n}\n\n.deleteIcon {\n  &:hover {\n    transform: scale(1.1);\n    transition: 0.5s;\n    cursor: pointer;\n  }\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem 1rem 0 1rem;\n  background-color: white;\n  border: 2px solid #ffd7d7;\n  border-radius: 0px 0px 20px 20px;\n}\n.content h3 {\n  font-size: 1.1rem;\n}\n\n.content p {\n  text-align: justify;\n  margin-top: 10px;\n}\n\n.commentBtn {\n  border-radius: 20px;\n  margin-bottom: 10px;\n  font-size: 12px;\n}\n\n.commentStructure {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.comment-container {\n  width: 80%;\n  font-size: 0.85rem;\n  border-bottom: 2px solid #95cbd3;\n  border-left: 2px solid #95cbd3;\n  border-right: 2px solid #95cbd3;\n  border-radius: 20px;\n  margin-top: 10px;\n}\n.comment-infos {\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n  border-bottom: 2px solid #95cbd3;\n  border-radius: 20px 20px 0px 0px;\n  background-color: #95cbd3;\n}\n\n.comment-username {\n  margin-left: 5px;\n  font-weight: bolder;\n  @media screen and (max-width: 500px) {\n    font-size: 0.75rem;\n  }\n}\n\n.date {\n  font-size: 0.8rem;\n  @media screen and (max-width: 500px) {\n    font-size: 0.75rem;\n  }\n}\n\n.comment-content {\n  font-style: italic;\n  display: flex;\n  justify-content: end;\n  padding-right: 20px;\n  margin-top: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}