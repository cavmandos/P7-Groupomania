{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.from-entries.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nvar url = \"http://localhost:3000/\"; //{headers: { Authorization: 'Bearer ' + this.user.token }};\n\nexport default {\n  name: \"PostsView\",\n  components: {},\n  data: function data() {\n    return {\n      user: null,\n      profile: false,\n      loading: false,\n      posts: [],\n      comments: [],\n      activities: [],\n      postContent: \"\",\n      postFile: \"\",\n      postErr: \"\",\n      commentErr: \"\",\n      commentOK: false\n    };\n  },\n  methods: {\n    filterComments: function filterComments(idPost) {\n      // console.log('filter is called');\n      return this.comments.filter(function (comment) {\n        return comment.postId == idPost;\n      });\n    },\n    //Post\n    newPost: function newPost(event) {\n      var _Object$fromEntries = Object.fromEntries(new FormData(event.target)),\n          content = _Object$fromEntries.content,\n          image = _Object$fromEntries.image;\n\n      var local = JSON.parse(localStorage.user);\n      var userId = local.userId;\n      var prenom = local.prenom;\n      var nom = local.nom;\n      var date = Date.now();\n      console.log(date);\n      this.content = content;\n      this.image = image;\n      console.log({\n        userId: userId,\n        content: content,\n        image: image\n      });\n      axios({\n        method: \"post\",\n        url: \"http://localhost:3000/posts\",\n        data: {\n          userId: userId,\n          content: content,\n          image: image,\n          prenom: prenom,\n          nom: nom,\n          date: date\n        },\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (reponse) {\n        console.log(reponse);\n        Swal.fire({\n          title: 'Nouvelle publication postée !',\n          icon: 'success',\n          confirmButtonText: \"Yes\",\n          willClose: function willClose() {\n            location.reload();\n          }\n        });\n      }).catch(function (err) {\n        alert(err.response.data.message);\n      });\n    },\n    //Delete post\n    deletePost: function deletePost(id) {\n      var local = JSON.parse(localStorage.user);\n      var token = local.token;\n      axios.delete(\"http://localhost:3000/posts/\".concat(id), {\n        headers: {\n          Authorization: \"Bearer \" + token\n        },\n        data: {\n          id: id\n        }\n      }).then(function (res) {\n        console.log(res.data);\n        Swal.fire({\n          text: \"Post supprimé\",\n          icon: \"success\",\n          timer: 1500,\n          showConfirmButton: false,\n          timerProgressBar: true,\n          willClose: function willClose() {\n            location.reload();\n          }\n        });\n      }).catch(function (error) {\n        console.log(error.response.data.error);\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (!localStorage.getItem(\"user\")) {\n      this.$router.push(\"/\");\n    } else {\n      this.user = JSON.parse(localStorage.getItem(\"user\")); // Get all posts\n\n      axios.get(\"\".concat(url, \"posts\")).then(function (res) {\n        _this.posts = res.data;\n      }).catch(function (err) {\n        _this.postErr = err;\n      }); // Get all comments\n\n      axios.get(\"\".concat(url, \"comments\")).then(function (res) {\n        _this.comments = res.data;\n        _this.loading = false;\n      }).catch(function (err) {\n        _this.commentErr = err;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AACA;AACA,mC,CACA;;AACA;AACAA,mBADA;AAEAC,gBAFA;AAGAC;AACA;AACAC,gBADA;AAEAC,oBAFA;AAGAC,oBAHA;AAIAC,eAJA;AAKAC,kBALA;AAMAC,oBANA;AAOAC,qBAPA;AAQAC,kBARA;AASAC,iBATA;AAUAC,oBAVA;AAWAC;AAXA;AAcA,GAlBA;AAmBAC;AACAC,kBADA,0BACAC,MADA,EACA;AACA;AACA;AAAA;AAAA;AACA,KAJA;AAKA;AACAC,WANA,mBAMAC,KANA,EAMA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AACAA;AAAAC;AAAAC;AAAAC;AAAA;AAEAC;AACAC,sBADA;AAEAC,0CAFA;AAGAvB;AAAAkB;AAAAC;AAAAC;AAAAI;AAAAC;AAAAC;AAAA,SAHA;AAIAC;AAAA;AAAA;AAJA,SAMAC,IANA,CAMA;AACAX;AACAY;AACAC,gDADA;AAEAC,yBAFA;AAGAC,kCAHA;AAIAC;AACAC;AACA;AANA;AAQA,OAhBA,EAiBAC,KAjBA,CAiBA;AACAC;AACA,OAnBA;AAoBA,KAtCA;AAuCA;AACAC,cAxCA,sBAwCAC,EAxCA,EAwCA;AACA;AACA;AAEAjB,YACAkB,MADA,uCACAD,EADA,GACA;AACAX;AACAa;AADA,SADA;AAIAxC;AAAAsC;AAAA;AAJA,OADA,EAQAV,IARA,CAQA;AACAX;AACAY;AACAY,+BADA;AAEAV,yBAFA;AAGAW,qBAHA;AAIAC,kCAJA;AAKAC,gCALA;AAMAX;AACAC;AACA;AARA;AAUA,OApBA,EAqBAC,KArBA,CAqBA;AACAlB;AACA,OAvBA;AAwBA;AApEA,GAnBA;AAyFA4B,SAzFA,qBAyFA;AAAA;;AACA;AACA;AACA,KAFA,MAEA;AACA,2DADA,CAEA;;AACAxB,YACAyB,GADA,WACAvB,GADA,YAEAK,IAFA,CAEA;AACA;AACA,OAJA,EAKAO,KALA,CAKA;AACA;AACA,OAPA,EAHA,CAWA;;AACAd,YACAyB,GADA,WACAvB,GADA,eAEAK,IAFA,CAEA;AACA;AACA;AACA,OALA,EAMAO,KANA,CAMA;AACA;AACA,OARA;AASA;AACA;AAlHA","names":["name","components","data","user","profile","loading","posts","comments","activities","postContent","postFile","postErr","commentErr","commentOK","methods","filterComments","idPost","newPost","event","console","userId","content","image","axios","method","url","prenom","nom","date","headers","then","Swal","title","icon","confirmButtonText","willClose","location","catch","alert","deletePost","id","delete","Authorization","text","timer","showConfirmButton","timerProgressBar","mounted","get"],"sourceRoot":"src/components","sources":["PostsView.vue"],"sourcesContent":["<template>\n  <v-card max-width=\"800\" class=\"mx-auto\">\n    <main class=\"activities-container\">\n      <div class=\"form-container\">\n        <v-toolbar class=\"red lighten-4\">\n          <v-toolbar-title>Créer une nouvelle publication</v-toolbar-title>\n        </v-toolbar>\n        <v-col md=\"6\" offset-md=\"3\">\n          <form @submit.prevent=\"newPost\">\n            <div class=\"form-group\">\n              <label for=\"content\"></label>\n              <input\n                type=\"textarea\"\n                name=\"content\"\n                id=\"content\"\n                placeholder=\"Ecrire quelque chose...\"\n                required\n                maxlength=\"300\"\n              />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"image\"></label>\n              <input\n                type=\"text\"\n                name=\"image\"\n                id=\"imagePost\"\n                placeholder=\"(Optionnel) Insérez ici l'url d'une image\"\n              />\n            </div>\n            <div class=\"form-group\">\n              <button type=\"submit\">POST</button>\n            </div>\n          </form>\n        </v-col>\n      </div>\n      <div class=\"error-msg\" v-if=\"postErr || commentErr\">\n        <p>{{ postErr }}</p>\n        <p>{{ commentErr }}</p>\n      </div>\n      <br />\n\n      <section class=\"all-posts-container\">\n        <!-- POST -->\n        <div class=\"post-container\" v-for=\"post in posts\" :key=\"post.id\">\n          <div class=\"infos\">\n            <div class=\"author\">\n              <img src=\"\" alt=\"imgPfl\" />\n              <p class=\"username\">{{ post.prenom }} {{ post.nom }}</p>\n            </div>\n            <div class=\"dateDelete\">\n              <p class=\"date\">\n                {{ post.date.slice(0, 16).replace(\"T\", \" / \") }}\n              </p>\n              <div @click=\"deletePost(post.id)\" class=\"deleteIcon\" v-if=\"user.userId == post.userId || user.userId == 1 \">\n                <v-icon> mdi-delete </v-icon>\n              </div>\n            </div>\n          </div>\n          <div class=\"content\">\n            <p>\n              {{ post.content }}\n            </p>\n            <!-- Image posted >-->\n            <div\n              class=\"postPict\"\n              v-if=\"post.image\"\n              :style=\"{ backgroundImage: 'url(' + post.image + ')' }\"\n            ></div>\n          </div>\n\n          <!-- 1 Comment -->\n          <div\n            class=\"comment-container\"\n            v-for=\"comment in filterComments(post.id)\"\n            :key=\"comment.id\"\n          >\n            <div class=\"comment-infos\">\n              <img src=\"\" alt=\"Profile picture\" />\n              <p class=\"comment-username\">PostID: {{ comment.postId }}</p>\n              <p class=\"comment-date\">{{ comment.date }}</p>\n            </div>\n            <div class=\"comment-content\">\n              <p>\n                {{ comment.content }}\n              </p>\n            </div>\n            <div class=\"comment-actions\">\n              <div\n                class=\"comment-owner-actions\"\n                v-if=\"user.userId == comment.userId\"\n              >\n                <i class=\"fa-solid fa-pen\"></i>\n                <i class=\"fa-solid fa-trash\"></i>\n              </div>\n              <i class=\"fa-solid fa-reply\"></i>\n            </div>\n          </div>\n          <!-- End comment -->\n        </div>\n        <!-- End post -->\n      </section>\n    </main>\n  </v-card>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nconst url = \"http://localhost:3000/\";\n//{headers: { Authorization: 'Bearer ' + this.user.token }};\nexport default {\n  name: \"PostsView\",\n  components: {},\n  data: function () {\n    return {\n      user: null,\n      profile: false,\n      loading: false,\n      posts: [],\n      comments: [],\n      activities: [],\n      postContent: \"\",\n      postFile: \"\",\n      postErr: \"\",\n      commentErr: \"\",\n      commentOK: false,\n\n    };\n  },\n  methods: {\n    filterComments(idPost) {\n      // console.log('filter is called');\n      return this.comments.filter((comment) => comment.postId == idPost);\n    },\n    //Post\n    newPost(event) {\n      const { content, image } = Object.fromEntries(new FormData(event.target));\n      let local = JSON.parse(localStorage.user);\n      let userId = local.userId;\n      let prenom = local.prenom;\n      let nom = local.nom;\n      let date = Date.now();\n      console.log(date);\n      this.content = content;\n      this.image = image;\n      console.log({ userId, content, image });\n\n      axios({\n          method: \"post\",\n          url: \"http://localhost:3000/posts\",\n          data: { userId, content, image, prenom, nom, date },\n          headers: { \"Content-Type\": \"application/json\" },\n        })\n          .then((reponse) => {\n            console.log(reponse);\n            Swal.fire({\n              title: 'Nouvelle publication postée !',\n              icon: 'success',\n              confirmButtonText: \"Yes\",\n              willClose: () => {\n                location.reload();\n              },\n            });\n          })\n          .catch((err) => {\n            alert(err.response.data.message);\n          });\n    },\n    //Delete post\n    deletePost(id) {\n      let local = JSON.parse(localStorage.user);\n      let token = local.token;\n      \n      axios\n        .delete(`http://localhost:3000/posts/${id}`, {\n          headers: {\n            Authorization: \"Bearer \" + token,\n          },\n          data: { id },\n          \n        })\n        .then((res) => {\n          console.log(res.data);\n          Swal.fire({\n            text: \"Post supprimé\",\n            icon: \"success\",\n            timer: 1500,\n            showConfirmButton: false,\n            timerProgressBar: true,\n            willClose: () => {\n                location.reload();\n              },\n          });\n        })\n        .catch((error) => {\n          console.log(error.response.data.error);\n        });\n    }\n  },\n  mounted() {\n    if (!localStorage.getItem(\"user\")) {\n      this.$router.push(\"/\");\n    } else {\n      this.user = JSON.parse(localStorage.getItem(\"user\"));\n      // Get all posts\n      axios\n        .get(`${url}posts`)\n        .then((res) => {\n          this.posts = res.data;\n        })\n        .catch((err) => {\n          this.postErr = err;\n        });\n      // Get all comments\n      axios\n        .get(`${url}comments`)\n        .then((res) => {\n          this.comments = res.data;\n          this.loading = false;\n        })\n        .catch((err) => {\n          this.commentErr = err;\n        });\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\nform {\n  border: 1px solid rgb(214, 214, 214);\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 0px;\n}\n\n.postPict {\n  width: 230px;\n  height: 200px;\n  background-position: center;\n  background-size: cover;\n  border: 1px solid rgb(214, 214, 214);\n  border-radius: 5%;\n  margin: 20px 0px 20px 0px;\n}\n\n.form-group {\n  width: 99%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0.3rem 1.5rem;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 0.6rem;\n  border: 1px solid rgb(133, 133, 133);\n  border-radius: 5px;\n}\n.form-group input::placeholder {\n  color: rgb(133, 133, 133);\n}\n\n.form-group button {\n  width: 7rem;\n  align-self: center;\n  cursor: pointer;\n  color: black;\n  background-color: #ffd7d7;\n  font-size: 1.1rem;\n  transition: 0.4s;\n  padding: 5px 0px;\n  border-radius: 20px;\n}\n.form-group button:hover {\n  transform: scale(1.1);\n}\n.error-msg {\n  background-color: var(--red);\n  width: 60%;\n  margin: 1rem auto;\n  text-align: center;\n  color: var(--white);\n  display: none;\n}\n/*POSTS + COMMENTS*/\n.all-posts-container {\n  width: 90%;\n  margin: auto;\n\n  @media screen and (min-width: 768px) {\n    width: 60%;\n  }\n}\n\n.post-container {\n  margin-bottom: 13px;\n}\n\n.infos {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n  background-color: #ffd7d7;\n  border-radius: 20px 20px 0px 0px;\n}\n.author {\n  display: flex;\n  align-items: center;\n}\n.infos img {\n  width: 2rem;\n  height: 2rem;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n}\n.dateDelete {\n  display: flex;\n}\n\n.deleteIcon {\n  &:hover {\n    transform: scale(1.1);\n    transition: 0.5s;\n    cursor: pointer;\n  }\n}\n\n.content {\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  padding: 0.5rem 1rem 0 1rem;\n  background-color: white;\n  border: 2px solid #ffd7d7;\n  border-radius: 0px 0px 20px 20px;\n}\n.content h3 {\n  font-size: 1.1rem;\n}\n.content img {\n  width: 100%;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: 0.5rem;\n}\n.content p {\n  text-align: justify;\n  margin-top: 10px;\n}\n\n.comment-container {\n  padding: 1rem;\n  font-size: 0.8rem;\n}\n.comment-infos {\n  display: flex;\n  align-items: center;\n  position: relative;\n  border-bottom: 1px solid;\n}\n.comment-infos img {\n  width: 2rem;\n  height: 2rem;\n  border-radius: 50%;\n  margin-right: 1rem;\n}\n.comment-username {\n  font-weight: bolder;\n}\n.comment-date {\n  width: auto;\n  margin-left: auto;\n}\n.comment-content {\n  font-style: italic;\n  padding: 0.3rem;\n}\n.comment-actions {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n.comment-actions i {\n  margin: 0 0.3rem;\n  padding: 0.3rem 0;\n  cursor: pointer;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}